파이썬 기반 웹 프레임워크


1)django?
파이썬으로 할 수 있는 것
-> not only web crawling, 데이터 분석, 웹 구축 가능 by django(웹 개발)

장고 장점:
1) 빠른 개발,생산성 향상   / 2) 모듈화, 재사용   /    3) 강력한 관리자 인터페이스   / 4) 보안+안정성

1) crud 작업 수행 가능(create, read, update, delete) 


3) 이미 admin이라는 관리자 인터페이스 구축되어 있음, 웹의 유지 보수에 좋다


4) 보안이 좋은 이유 -> sql injection(악의적인 sql 공격)에 안전 - 내부 데이터베이스 가져서





2)web framework?
웹 개발의 뼈대 - 웹은 target user, function 에 따라 각각 다르다
웹을 보면 기본 뼈대 있다 (이걸 hard coding하기에 빡셈)


기존에 구축된 틀을 사용해서 웹을 구축하는 것이 매우 효과적(데이터, 흐름, 화면)




3)backend?
과거 웹 : html, css에 집중(front), backend는 단순했다
현재: 매우 많은 이벤트 발생, 기능+동작 다, 디자인을 넘어 개발이 복잡, 동적인 부분..
인공지능 알고리즘 탑재하고 있음

frontend : 화면을 어떻게 배치하고 구조화할지 고민
backend: 웹의 심장, 웹사이트의 동적, 로직처리를 담당 
사용자가 요청한 데이터를 데이터베이스에서 찾아 정보를 display해줌

django의 특화점-> front, back 둘 중 어디?
엄밀히 풀스텍 web framework

장고 2003년도에 탄생 ->  (django frontend template)
backend로 많이 사용 

장고의 패턴(mvc, mtv)
m(model)tv -> 데이터의 구조와 동작 정의
orm (orm) object relatiional model - 객체관계현
sql 쿼리를 직접 작성하지 않고도 데이터베이스와 상호작용
데이터베이스의 테이블과 열을 pyton 클래스와 속성으로 매핑


T: template
웹 페이지의 외관과 레이아웃을 구성
html,  css, javascript - layout 구성
django tempalte 문법 - 동적 데이터를 포함할 수 있는 템플릿 언어를 사용하여 정의
중계자의 역할을 함
서버로부터 전달받은 데이터를 표시하고 사용자의 요청을 처리


V: view
요청 처리 사용자에게 응답을 반환하는 로직 정의
함수 또는 클래스로 정의, http 요청에 대한 처리



class : 기능(함수)을 모아 둔 레시피
변수와 메서드를 포함하는 구조 - 특정한 목적을 위해 묶어서 사용





4)환경구축

exe 체크하고 다운

경로 지정, 분리된 환경에서 모듈 관리하게 해줌

virtual env 저장하는 데 필요하다

가상환경이 무엇인가?
(협업할 때) 같은 버전의 언어와 패키지 사용하지 않으면 충돌 위험
가상환경을 만들어 줘야 함 - 일정한 개발환경 유지시켜줌

파이썬 설치 -> cmd 창 이용 -> 쟝고 설치


명령어⭐ - cd (change directory)
	현재 작업중인 디렉토릴르 다른 디렉토리로 변경해줌
	(특정 디렉토리로 이동하는 데 사용)

- cd.. ⭐(현재 디렉토리에서 상위 디렉토리로 이동)


- mkdir (현재 위치한 디렉토리에 새로운 디렉토리 생성) (폴더 생성)

- rmdir(빈 디렉토리를 삭제하는데 사용) (즉 삭제하려는 디렉토리가 비어있어야 한다)

- rd /s 하위 디렉토리와 파일을 포함한 모든 내용을 삭제하는 옵션


mkdir django_project
python -m venv venv
cd Scripts
activate
pip install django

django-admin startproject mysite -> 장고 프로젝트 만들기

cls

command prompt로 해야 됨
-> 일관성 때문에 (powershell 더 강력하나 복잡)


app: project의 하위 component
ex) sns 프로젝트 -> 장고로 구축
큰 디렉토리 안에 사진 기능, 메세지 기능, 검색 기능 등 단위로 각각 묶는다(app)


manage.py -> 장고프로젝트와 상호작용하게 해주고, 프로젝트 관리를 위해 명령어 지원
개발서버 지원, 앱 생성 등등

> python manage.py startapp mysite_app

python manage.py runserver

python manage.py startapp portfolio 앱 생성
1)urls.py 생성하기, 앱에서
2) settings로 가서 app 등록해줌
3) 상사 url 가서 path include 해줌
ex) import path, include
ex) path('', include('pages.urls')),
----------------------------------------
view로 가서 함수 만들기
def home(request):
    return render(request, "home.html", {})
#rendering된 결과값을 return 받을 것
------------------------------------------

url가서 url pattern 만들어주기
from django.urls import path
from . import views
# 현재 디렉토리에서 views를 불러와줘

urlpatterns = [

path('', views.home, name = "home"),
path('about/', views.about, name = "about"),

]
--------------------------------------------
앱 하위에 html 만들어주기
그리고 아래에 django.html을 클릭해서 html로 바꿔주기
그리고 각 html에 코드 작성





ctrl + c -> manage.py 꺼짐(서버 종료 기능) 중⭐
dir 치면 안에 무슨 파일 있는 지 알려줌

===============================================================================
Manage.py란?

- django project와 상호작용 할 수 있게 해줌
- django project 관리를 위한 명령어 지원
- 개발 서버를 실행, App을 생성, 데이터 베이스 명령

### .py 파일들 이해하기 (파일 형식)

1. **.ipynb 파일**:
    - Jupyter Notebook 파일의 확장자.
    - Jupyter Notebook은 대화식 개발 환경으로, 코드와 텍스트 설명을 조합한 "노트북" 형태의 문서를 만들 수 있습니다.
    - .ipynb 파일은 코드 셀과 문서 셀이 번갈아 나오며, 코드 실행 결과와 함께 시각화나 텍스트를 포함할 수 있음.
    - 주피터 노트북 환경에서 코드 실행과 디버깅을 할 수 있습니다.
2. **.py 파일**:
    - 일반적인 파이썬 소스 코드 파일의 확장자입니다.
    - .py 파일은 주로 텍스트 에디터나 통합 개발 환경(IDE)에서 편집되며, 순수한 파이썬 코드를 담고 있습니다.
    - 실행을 위해서는 파이썬 인터프리터로 파일을 실행하거나 다른 파이썬 코드에서 해당 모듈

프로젝트 상위 디렉토리
- 가상환경
- 장고 프로젝트

==================================================================
앱을 등록했는데 중재자가 없다, 저장하는 거 까먹지 말기, powershell 말고 commend prompt로, 폴더 파일 이름 바꾸지 않는 거 중요

static은 앱 밖에다 만들어줘야 한다
css, javascript 는 static (정적)
api -> 종류에 따라 내용이 변함(동적)
views
=================================================================
static - css, 이미지 등 정적 파일 넣어두는 곳
큰 디렉토리에 가상환경 따로, 프로젝트 따로 만들어줌
개발서버, 데이터베이스와 상호작용
폴더 생성 이후(ex 프로젝트) 이름 바꾸면 ㅈ된다!

반대는 dynamic -> 사용자 입력, 외부api 에 따라 결과값 변함(서버 측에서 추가적인 변형해줘야 함)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static') 
]

home.html에 {%load static%}
<img src="{% static 'images/me.jpg'%}" width = "150px" height = "150px">
사진 바꿨는데 안바뀌는 이유
img 바꿔줬는데 새로고침을 눌러도 변동이 없었다(특히 다른 파일을 같은 이름으로) 
-> caching 때문 
caching 웹페이지를 빠르게 load하고 성능을 향상시키는데 사용되는 기술
-> 이미 다운로드한 파일을 cache에 저장하여서 불필요한 다운로드를 방지
그래서 같은 파일 명으로 이미지를 static 폴더에 저장할 경우 장고 static 파일은 브라우저에서
cache를 사용하여 파일을 다시 다운로드하지 않는 경우가 흔함

================================================================
you have 18 unapplied migrations -> 
내장 db의 스키마 변경하는 작업을 관리하는 역할 (migrations)
장고의 mtv패턴에서 m은 모델(데이터베이스)
장고의 migration 추후 모델 클레스를 변경했을 때, 이 변경 사항을 db에 반영
모델 클래스: 데이터베이스의 테이블과 연결된 데이터 모델을 정의하는 파이썬 객체/ 데이터베이스에 저장하고자 하는 데이터를 정의하는 곳
admin에 user만드려면 16개 승인해야 한다

1) python manage.py runserver
2) python manage.py migrate해서 db에 적용시켜줘야 함


슈퍼유저(superuser)생성 - 관리자 계정 생성
3) python manage.py createsuperuser
woo / aswm0121

django 다운로드 하기(태그 달아줌) 해당 extension

<플로그 만들기>
파일 생성 후 연결 시켜야 함
템플릿 중 base.html 사용한다

base.html -> 공통 요소
apple store에 내부 바들 (같은 웹 사이트에서 어떤 html 파일로 넘어가도 공통적으로 보여지는 것)


bootrstap -> html, css 요소 별로 소스코드 제공
로그인 창 일일이 안쳐도 됨 !! 링크 연결해주면 사용 가능(코드 가져옴)
bootstrp introduction에 들어가서 복사
django html -> block 파이썬 언어 기반이므로 처음과 끝을 알려줘야(html문서와 짬뽕 되서)
안에 넣어주면 공통요소로 다른 html에 다 적용됨, 다른 html 파일들 내용 다 이 안에 들어간다고 보면됨


{% extends 'base.html'%}

navbar-dark  bg-dark

{% comment %} IF, FOR 쓰면 뒤에 ENDIF, ENDFOR {% endcomment %}



url 이름으로 주소 잡기
<a href="{% url 'home'%}">home</a> | <a href="{% url 'about'%}">about</a>
{%extends 'base.html'%}
{%load static%}



